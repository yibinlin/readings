<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Yibin Lin's Reading Blog</title><link>https://yibinlin.github.io/readings/tags/python/</link><description>Recent content in python on Yibin Lin's Reading Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yibinlin.github.io/readings/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Study</title><link>https://yibinlin.github.io/readings/posts/python_study/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://yibinlin.github.io/readings/posts/python_study/</guid><description>Python Type Projects A type object = an instance of type class = a normal class type and class are interchangable since Python 2.4 print(type(type)) # result: &amp;lt;class 'type'&amp;gt; print(type(str)) # result: &amp;lt;class 'type'&amp;gt; So type class is also an instance of type class. This is basica building block of Python, and cannot be expressed in Python language. In python everything is an object, so a class is an object (instance) of type.</description></item></channel></rss>